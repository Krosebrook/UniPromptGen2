


import React, { useState } from 'react';
import { generateImage } from '../../services/geminiService.ts';
// Fix: Module '"../icons/Icons.tsx"' has no exported member 'PhotoIcon'.
import { SparklesIcon } from '../icons/Icons.tsx';

const aspectRatios = ["1:1", "3:4", "4:3", "9:16", "16:9"];

const ImageGenerator: React.FC = () => {
  const [prompt, setPrompt] = useState('A cinematic shot of a robot holding a red skateboard in a futuristic city, neon lights, detailed, 8k');
  const [aspectRatio, setAspectRatio] = useState("16:9");
  const [isLoading, setIsLoading] = useState(false);
  const [generatedImage, setGeneratedImage] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const handleGenerate = async () => {
    if (!prompt) return;
    setIsLoading(true);
    setGeneratedImage(null);
    setError(null);

    try {
      const imageUrl = await generateImage(prompt, aspectRatio);
      setGeneratedImage(imageUrl);
    } catch (err) {
      console.error("Image generation failed:", err);
      setError(err instanceof Error ? err.message : "An unknown error occurred.");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="flex flex-col h-full">
      <div className="space-y-4 mb-4">
        <div>
          <label htmlFor="prompt" className="block text-sm font-medium text-muted-foreground mb-1">Prompt</label>
          <textarea
            id="prompt"
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            placeholder="e.g., A photo of a cat wearing a wizard hat."
            className="w-full h-24 p-2 bg-input rounded-md text-foreground focus:ring-2 focus:ring-ring focus:outline-none"
          />
        </div>
        <div>
           <label htmlFor="aspect-ratio" className="block text-sm font-medium text-muted-foreground mb-1">Aspect Ratio</label>
           <select
            id="aspect-ratio"
            value={aspectRatio}
            onChange={(e) => setAspectRatio(e.target.value)}
            className="w-full p-2 bg-input rounded-md text-foreground focus:ring-2 focus:ring-ring focus:outline-none"
           >
            {aspectRatios.map(ar => <option key={ar} value={ar}>{ar}</option>)}
           </select>
        </div>
        <button
          onClick={handleGenerate}
          disabled={isLoading || !prompt.trim()}
          className="w-full inline-flex items-center justify-center px-4 py-2 text-sm font-medium text-primary-foreground bg-primary rounded-md hover:bg-primary/90 disabled:opacity-50"
        >
          <SparklesIcon className="h-5 w-5 mr-2" />
          {isLoading ? 'Generating...' : 'Generate Image'}
        </button>
      </div>

      <div className="flex-1 flex items-center justify-center bg-black/20 rounded-lg relative group">
        {isLoading && <p className="text-muted-foreground">Generating image, this may take a moment...</p>}
        {error && <p className="text-destructive">{error}</p>}
        {generatedImage && (
          <>
            <img src={generatedImage} alt="Generated by AI" className="max-h-full max-w-full object-contain rounded-md" />
            <a
              href={generatedImage}
              download="generated-image.jpg"
              className="absolute bottom-4 right-4 bg-primary text-primary-foreground px-3 py-1.5 rounded-md text-sm font-medium opacity-0 group-hover:opacity-100 transition-opacity focus:opacity-100"
              aria-label="Download generated image"
            >
              Download
            </a>
          </>
        )}
        {!isLoading && !generatedImage && !error && (
            <div className="text-center text-muted-foreground">
                <SparklesIcon className="h-12 w-12 mx-auto mb-2"/>
                <p>Your generated image will appear here.</p>
            </div>
        )}
      </div>
    </div>
  );
};

export default ImageGenerator;